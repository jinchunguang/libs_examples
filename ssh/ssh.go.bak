/**
 * @Author : jinchunguang
 * @Date : 19-11-28 下午6:48
 * @Project : sty
 */

package main

import (
    "fmt"
    "golang.org/x/crypto/ssh"
    "io"
    "log"
    "net"
    "strings"
    "sync"
    "time"
)


func main() {

    sshConf:=make(map[string]string)

    sshConf["host"]="106.13.224.6"
    sshConf["port"]="2222"
    sshConf["User"]="jinchunguang"
    sshConf["Password"]="Yjcsxdl~2019oooo"


    config := &ssh.ClientConfig{
        User: sshConf["User"],
        Auth: []ssh.AuthMethod{
            ssh.Password(sshConf["Password"]),
        },
        Timeout: 30 * time.Second,
        HostKeyCallback: func(hostname string, remote net.Addr, key ssh.PublicKey) error {
            return nil
        },
    }
    client, err := ssh.Dial("tcp",  sshConf["host"]+":"+sshConf["port"], config)
    if err != nil {
        panic("Failed to dial: " + err.Error())
    }


    // Each ClientConn can support multiple interactive sessions,
    // represented by a Session.
    session, err := client.NewSession()
    if err != nil {
        panic("Failed to create session: " + err.Error())
    }
    defer session.Close()

    // Once a Session is created, you can execute a single command on
    // the remote side using the Run method.
    // var b bytes.Buffer
    // session.Stdout = &b
    // if err := session.Run("cat /etc/os-release"); err != nil {
    //     panic("Failed to run: " + err.Error())
    // }
    // fmt.Println(b.String())


    modes := ssh.TerminalModes{
        ssh.ECHO:          0,     // disable echoing
        ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud
        ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud
    }

    if err := session.RequestPty("xterm", 80, 40, modes); err != nil {
        log.Fatal(err)
    }

    w, err := session.StdinPipe()
    if err != nil {
        panic(err)
    }
    r, err := session.StdoutPipe()
    if err != nil {
        panic(err)
    }
    e, err := session.StderrPipe()
    if err != nil {
        panic(err)
    }


    in, out := MuxShell(w, r, e)
    if err := session.Shell(); err != nil {
        log.Fatal(err)
    }
    <-out //ignore the shell output

    in <- "sudo apt-get update"
    fmt.Printf("whoami: %s\n", <-out)

    in <- "Yjcsxdl~2019oooo"
    fmt.Printf("whoami: %s\n", <-out)

    session.Wait()

}

func MuxShell(w io.Writer, r, e io.Reader) (chan<- string, <-chan string) {
    in := make(chan string, 1)
    out := make(chan string, 1)
    var wg sync.WaitGroup
    wg.Add(1) //for the shell itself
    go func() {
        for cmd := range in {
            wg.Add(1)
            w.Write([]byte(cmd + "\n"))
            wg.Wait()
        }
    }()
    go func() {
        // here i try to grep sudo from stderr, but not work
        var (
            buf [65 * 1024]byte
            t   int
        )
        for {
            n, err := e.Read(buf[t:])
            if err != nil && err.Error() != "EOF"{
                fmt.Println(err)
            }
            if s := string(buf[t:]); strings.Contains(s, "sudo"){
                fmt.Println("here")
                w.Write([]byte("123456\n"))
            }else{
            }
            t += n
        }
    }()
    go func() {
        var (
            buf [65 * 1024]byte
            t   int
        )
        for {
            n, err := r.Read(buf[t:])
            if err != nil {
                fmt.Println(err.Error())
                close(in)
                close(out)
                return
            }
            if s := string(buf[t:]); strings.Contains(s, "[sudo]"){
                w.Write([]byte("ubuntu\n"))
            }else{
            }
            t += n
            if buf[t-2] == '$' { //assuming the $PS1 == 'sh-4.3$ '
                out <- string(buf[:t])
                t = 0
                wg.Done()
            }
        }
    }()
    return in, out
}